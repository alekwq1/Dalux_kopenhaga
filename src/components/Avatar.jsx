/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/688379fb5261d5d7f3d7921a.glb -o src/components/Avatar.jsx -k -r public
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGraph, useFrame } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF, useScroll } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

/**
 * Props:
 * - currentSection: string  -> "home" | "skills" | "projects" | "contact" | ...
 */
export function Avatar({ currentSection, ...props }) {
  const { scene } = useGLTF("/models/688379fb5261d5d7f3d7921a.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  // Załaduj 3 animacje
  const { animations: idleAnimation } = useFBX("animations/Idle.fbx");
  const { animations: walkingAnimation } = useFBX("animations/Walking.fbx");
  const { animations: handAnimation } = useFBX("animations/Hand.fbx");

  // Nazwy klipów
  if (idleAnimation[0]) idleAnimation[0].name = "Idle";
  if (walkingAnimation[0]) walkingAnimation[0].name = "Walking";
  if (handAnimation[0]) handAnimation[0].name = "Hand";

  const group = useRef();
  const { actions } = useAnimations(
    [idleAnimation[0], walkingAnimation[0], handAnimation[0]].filter(Boolean),
    group
  );

  const [animation, setAnimation] = useState("Idle");
  const scrollData = useScroll();
  const lastScroll = useRef(0);
  const homeTimer = useRef(null);

  useFrame(() => {
    const scrollDelta = scrollData.offset - lastScroll.current;

    // priorytet: przewijanie -> Walking
    if (Math.abs(scrollDelta) > 0.00001 && actions["Walking"]) {
      setAnimation("Walking");

      // Kasujemy timer, jeśli przewijamy
      if (homeTimer.current) {
        clearTimeout(homeTimer.current);
        homeTimer.current = null;
      }
    } else {
      if (currentSection === "home") {
        // Jeśli jesteśmy w home i timer nie istnieje
        if (!homeTimer.current) {
          setAnimation("Idle"); // Od razu Idle
          homeTimer.current = setTimeout(() => {
            setAnimation("Hand"); // Po 5 sek → Hand
          }, 5000);
        }
      } else {
        // W innych sekcjach od razu Idle
        setAnimation("Idle");
        if (homeTimer.current) {
          clearTimeout(homeTimer.current);
          homeTimer.current = null;
        }
      }
    }

    // płynny obrót względem kierunku scrolla
    let rotationTarget = 0;
    if (Math.abs(scrollDelta) > 0.00001) {
      rotationTarget = scrollDelta > 0 ? 0 : Math.PI;
    }
    if (group.current) {
      group.current.rotation.y = THREE.MathUtils.lerp(
        group.current.rotation.y,
        rotationTarget,
        0.1
      );
    }

    lastScroll.current = scrollData.offset;
  });

  // Odpalanie / wygaszanie aktywnej akcji
  useEffect(() => {
    const act = actions?.[animation];
    if (!act) return;
    act.reset().fadeIn(0.3).play();
    act.setLoop(THREE.LoopRepeat, Infinity); // pętla animacji
    return () => act.fadeOut(0.3);
  }, [animation, actions]);

  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/688379fb5261d5d7f3d7921a.glb");
useFBX.preload("animations/Idle.fbx");
useFBX.preload("animations/Walking.fbx");
useFBX.preload("animations/Hand.fbx");
